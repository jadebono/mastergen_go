package main

var Doc string = `# SHA256 Master Password Generator

A password generator using the SHA256 hash function. Currently a password generated by this hash function would be prohibitively difficult for virtually any entity to attack.

---

## Licence

// SPDX-License-Identifier: MIT  
Copyright (c) 2022 [Joseph Anthony Debono](joe@jadebono.com)

---

## To Run

First compile

bash:
# the path should be within the usual Go folder setup in src/github.com/user/target
go mod init go/src/github.com/YOUR_USERNAME/mastergen
go mod tidy
# When you are ready to compile. (Note you can build for other architectures as well)
go build
# To run the compiled file.
./mastergen seedPhrase depth


## Purpose

Good password praxis generally recommends a password of very high entropy for every one of your accounts. A password manager can generate as many highly entropic passwords of significant length as necessary.

However, passwords managers have a glaring vulnerability - they themselves require a master password. Unfortunately, most people generally use passwords that are easy to remember and to type, making them low entropy, and vulnerable to attack in a number of ways, thus vitiating the strength of the passwords protected by your password manager.

Solution: Use a sha256 hash function to generate the master password for the password manager. A hash produced by such a function not only has very high entropy, but it is deterministic, meaning that you can generate it at will as long as you have access to the hash function. This will provide you with a password that you will not remember so is impervious to social engineering attacks. However, you will still be able to generate it easily at any time you need it using simple and memorable phrase and depth inputs.

---

## Using the Generator

1. Input a string in the phrase field. This can be any phrase you like. Since this will be hashed, it will not be your password, but its seed, so you are free to use any character/word/phrase you can remember easily. It does not matter how simple the phrase is because it will be run through the hash function the number of times specified by the depth. For example, using "a" as your phrase with a depth of 10 will generate the following hash as your password: "389acb1da3cc19ae115c89eec398f9f2d2f3d961ff23a76decda54bf9660fac5".

1. Depth is the number of times you want to run the phrase through the hash function and then run the resultant hash back through the hash function. This will give you protection against brute force attempts using the hash function if the attacker suspects the use of one. Even if the attacker guesses the phrase, he will have no idea of the depth, leaving your security intact.

**Example - Phrase: bird, Depth: 7**

The generated password is the **seventh** hash of this process.

0. bird
1. 7a5179eecc0fe18760ba615f92603372ae3fe302860098a019e15927551fee3b
2. 1467d232075b693bd528521179679ec07a083e4f0076ecd2af61607d6b5b2b38
3. 282cf0b370024ec7f617ecc43e57bea2f748b7ea6b22b52ae09cfe997513851b
4. 1d7532e421b85bb72b5d42d2c3aa2f526a5b8204950c02e2949b9ed39d35ea54
5. a455a212dde0f7051228efc31bb03fef5d20761812cf79bbc198d397f718761e
6. c7cc84962be268d578079c3e13694a9230de992f8186c53bc961376705922635
7. 91c2b32ead801dc707c24b022b8497ca0f0ee2afaf13c6c88dc290a594289d95

Your generated password is: 91c2b32ead801dc707c24b022b8497ca0f0ee2afaf13c6c88dc290a594289d95

Note: mastergen has been tested to a depth of 1e10, taking about 110 seconds to generate the output.

---

## Further Notes

1. Both the phrase and depth fields are inputs of type="password" to hide the inputs from onlookers.
2. Leaving the depth field blank will submit your phrase through the hash function ONCE.
3. Although you should provide nothing but an integer for depth, input validation has been implemented forthis field with the following results:
   1. Leaving the depth field blank => Depth is set to 0.
   1. Inputting text into the depth field => Depth is set to 0.
   1. Inputting an float into the depth field => Depth is set to the float rounded to an integer (ex: 3.2 => 3, 4.8 => 5).

---

`

var Help string = `
usage: 

./mastergen -flag

list of flags:

-d: docs
-h: list of flags
-v: version
`

var Version string = `
mastergen current version: 0.1v
`
